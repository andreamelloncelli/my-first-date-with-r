require(tetrapaklib)
build_par_table
a <- NULL
get_value(a)
require(ggplot2)
require(qdata)
data(people)
ggplot(people, aes(x = Weight, y = Height, colour = Area)) +
geom_point() +
stat_smooth(method = "lm", se = F) +
scale_colour_brewer(palette="Set1") +
coord_equal() +
facet_grid(. ~ Area) +
ggtitle("Scatterplot of weight and height of \n italian people by geographical area") +
xlab("Weight (kg)") +
ylab("Height (cm)") +
theme(plot.background = element_blank(),
axis.text = element_text(colour = "black"),
axis.ticks = element_line(colour = "black"),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.title = element_text(colour = "black", size = 14, face = "bold.italic"),
strip.background = element_rect(colour = "black"),
strip.text = element_text(colour = "black", face = "bold.italic", size = 12),
plot.title = element_text(colour = "black", size = 20, face = "bold.italic", hjust = 0.5),
panel.spacing = unit(1, "lines"),
legend.position="none")
ggplot(data = people, aes(x = Weight, y = Height))
ggplot(people, aes(x = Weight, y = Height)) +
geom_point() + # layer 1 (draw points)
stat_smooth(method = "lm", se = FALSE) # layer 2 (draw regression line)
ggplot(people, aes(x = Weight, y = Height, colour = Area)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_colour_brewer(palette="Set1")
ggplot(people, aes(x = Weight, y = Height, colour = Area)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE) +
scale_colour_brewer(palette="Set1") +
coord_equal() # change coord system (one unit on the x-axis is the same length as one unit on the y-axis)
ggplot(people, aes(x = Weight, y = Height, colour = Area)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE) +
scale_colour_brewer(palette="Set1") +
coord_equal() +
facet_grid(. ~ Area)
ggplot(people, aes(x = Weight, y = Height, colour = Area)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE) +
scale_colour_brewer(palette="Set1") +
coord_equal() +
facet_grid(. ~ Area) +
ggtitle("Scatterplot of weight and height of \n italian people by geographical area") + # set title
xlab("Weight (kg)") + # set x axis title
ylab("Height (cm)") + # set y axis title
theme(plot.background = element_blank(), # customize plot background
axis.text = element_text(colour = "black"), # customize axes text
axis.ticks = element_line(colour = "black"), # customize axes ticks
axis.line.x = element_line(colour = "black"), # customize x axis line
axis.line.y = element_line(colour = "black"), # customize y axis line
axis.title = element_text(colour = "black", size = 14, face = "bold.italic"), # customize axes titles
strip.background = element_rect(colour = "black"), # customize background of facet labels
strip.text = element_text(colour = "black", face = "bold.italic", size = 12), # customize facet labels
plot.title = element_text(colour = "black", size = 20, face = "bold.italic", hjust = 0.5), # customize plot title
panel.spacing = unit(1, "lines"), # customize panels spacing
legend.position = "none") # remove the legend
ggplot(data = people, mapping = aes(x = Area)) +
geom_bar(fill = "royalblue", colour = "black", width = 0.5)
ggplot(data = people, mapping = aes(x = Area, fill = Gender)) + # map Gender to fill scale
geom_bar(position = "dodge", width = 0.8, colour="black") + # customize bar positions
scale_fill_brewer(palette = "Accent") + # customize fill scale
ggtitle("Barplot of Area by Gender") + # set title
theme(axis.title.y = element_text(size = rel(1.5), angle = 90), # customize y axis title
axis.title.x = element_text(size = rel(1.5)), # customize x axis title
axis.text.x = element_text(colour="black"), # customize x axis text
plot.title = element_text(size = rel(2)), # customize plot title
legend.title = element_text(size = rel(1.5)))  # customize legend title
ggplot(data=people, mapping=aes(x=Weight)) +
geom_histogram(fill="#2B4C6F", colour="#3690c0", binwidth=5)
ggplot(data=people, mapping=aes(x=Weight)) +
geom_histogram(mapping=aes(fill=Area), binwidth=5, colour="black") + # map Area to fill scale
scale_fill_manual(values = c("#70D6FF", "#FF70A6", "#FF9770", "#E9FF70")) + # customize fill scale
facet_wrap( ~ Area) + # generate a panel for each Area level
theme(axis.text = element_text(colour = "black"), # customize axes text
axis.ticks = element_line(colour = "black"), # customize axes
axis.title = element_text(colour = "black", size = 14, face = "bold.italic"), # customize axes title
strip.background = element_rect(colour = "black", fill=), # customize background of facet labels
strip.text = element_text(colour = "black", face = "bold.italic", size = 12), # customize facet labels
plot.title = element_text(colour = "black", size = 20, face = "bold.italic"), # customize plot title
legend.position = "none") # remove legend
ggplot(data=people, aes(x=Area, y=Weight)) +
geom_boxplot(fill="#74a9cf", colour="#034e7b")
ggplot(data=people, aes(x=Area, y=Weight, fill=Gender)) + # map Gender to fill
geom_boxplot(outlier.size = 1.5, outlier.shape = 21, width = .5) +
stat_summary(fun.y = "mean", geom = "point", shape = 23, size = 2, fill = "red") + # compute and plot distributions means
ggtitle("Boxplot of Weight by Area and Gender") + # set title
theme_classic() # change theme
data(orange)
head(orange)
require(dplyr)
ggplot(data=orange %>% filter(Tree==1), mapping=aes(x=age, y=circumference)) +
geom_line(colour= "forestgreen", size=1.3)
ggplot(data=Orange, mapping=aes(x=age, y=circumference, colour=Tree)) + # Map Tree to colour scale
geom_line(mapping=aes(linetype=Tree)) + # Map Tree to linetype scale
scale_colour_manual(values = c("palegreen", "green", "mediumseagreen", "forestgreen" ,"darkgreen")) + # customize colours
ylim(0,250) + xlim(0,1600) + # set axis limits
ggtitle("Lineplot of Orange Tree Growth") + # set title
xlab("Age") + ylab("Circumference") + # set axes titles
theme(axis.text = element_text(colour = "black"), # customize axis text
axis.ticks = element_line(colour = "black"), # customize axis ticks
axis.title = element_text(colour = "black", size = 14, face = "bold"), # customize axes title
plot.title = element_text(colour = "black", size = 20, face = "bold"), # customize plot title
legend.text = element_text(colour="black", size=10), # customize legend text
legend.title = element_text(colour = "black", size = 14, face = "bold")) # customize legend title
require(qdata)
data(drug)
str(drug)
require(ggplot2)
pl <- ggplot(data = drug, mapping = aes(x = dose, y=time)) +
geom_point() +
xlab(label = "Dose (mg)") +
ylab(label = "Reaction Time (secs)")
pl
pl + geom_smooth(method="lm", se=FALSE)
fm <- lm(formula = time ~ dose, data = drug)
summary(fm)
coef(fm)
resid(fm)
fitted(fm)
newdata <- data.frame(dose = c(0.2, 0.4, 0.6 ))
predict (fm, newdata = newdata)
par(mfrow = c(2,2))
plot(fm)
require(nnet)
require(qdata)
data(titanic)
head(titanic)
require(dplyr)
titanic %>%
group_by(Status) %>%
summarise(n = n()) %>%
mutate(freq = paste(round(n/sum(n)* 100, 2), "%"))
titanic %>%
group_by(Status, Class) %>%
summarise(n = n()) %>%
mutate(freq = paste(round(n/sum(n)* 100, 2), "%"))
titanic %>%
group_by(Status, Gender) %>%
summarise(n= n()) %>%
mutate(freq = paste(round(n/sum(n)* 100, 2), "%"))
require(ggplot2)
ggplot(data=titanic, mapping=aes(x=Status, y=Age)) +
geom_boxplot(fill="#74a9cf", colour="#034e7b")+
ggtitle("Box-plot of Age within levels of Status")
train <- titanic %>% sample_frac(0.7)
test <- titanic %>% slice(-as.numeric(rownames(train)))
nn_mod <- nnet(Status ~ Class + Gender + Age, data = train, size = 3)
pr <- predict(object = nn_mod, newdata = test)
head(pr)
test <- test %>% mutate(pr_mod = pr < .5)
test %>%
group_by(Status, pr_mod) %>%
summarise(n = n()) %>%
mutate(freq = paste(round(n/sum(n)* 100, 2), "%"))
